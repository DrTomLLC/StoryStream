# .github/workflows/promote-on-push.yml
name: Promote on push
on:
  push:
    branches: [first-dev, stage-7-security, stage-9-final]
permissions:
  contents: write
  pull-requests: write
jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const from  = context.ref.replace("refs/heads/","");
            const map = { "first-dev":"stage-7-security","stage-7-security":"stage-9-final","stage-9-final":"main" };
            const to = map[from];
            if (!to) return;

            async function ensure(branch){
              try { await github.rest.repos.getBranch({owner,repo,branch}); }
              catch(e){
                if (e.status === 404) {
                  const def = (await github.rest.repos.get({owner,repo})).data.default_branch;
                  const sha = (await github.rest.git.getRef({owner,repo,ref:`heads/${def}`})).data.object.sha;
                  await github.rest.git.createRef({owner,repo,ref:`refs/heads/${branch}`,sha});
                } else throw e;
              }
            }
            await ensure(to);

            let pr = (await github.rest.pulls.list({owner,repo,state:"open",head:`${owner}:${from}`,base:to})).data[0];
            if(!pr){
              pr = (await github.rest.pulls.create({owner,repo,head:from,base:to,title:`Promote: ${from} → ${to}`})).data;
            }
            try {
              await github.rest.pulls.merge({ owner, repo, pull_number: pr.number, merge_method: "squash" });
            } catch (e) {
              core.warning(`Merge blocked: ${e.message}`); // PR will be open—approve or adjust rule
            }
