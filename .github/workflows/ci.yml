name: storystream-ci

on:
  push:
    branches: ["first-dev","develop","release-candidate","master","feature/**"]
  pull_request:
    branches: ["develop","release-candidate","master"]
  workflow_dispatch: {}

# Cancel older runs for the same branch when new commits arrive
concurrency:
  group: storystream-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  hygiene:
    name: 1) Hygiene & Style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check
      - run: cargo check --workspace --all-targets

  clippy:
    name: 2) Lint (clippy -D warnings)
    runs-on: ubuntu-latest
    needs: [hygiene]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  build-matrix:
    name: 3) Build matrix (OS×toolchain×features)
    needs: [clippy]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain: [stable, beta]
        features: ["--no-default-features", "", "--all-features"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --workspace --all-targets ${{ matrix.features }}

  tests:
    name: 4) Unit & Doc tests
    runs-on: ubuntu-latest
    needs: [build-matrix]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo test --workspace --all-features
      - run: cargo test --doc --workspace --all-features

  coverage:
    name: 5) Coverage gate
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cargo-tarpaulin --locked
      - run: cargo tarpaulin --workspace --all-features --out Xml --timeout 1800
      - name: Enforce min coverage
        shell: bash
        run: |
          rate=$(grep -o 'line-rate="[^"]*' cobertura.xml | head -1 | cut -d'"' -f2)
          echo "Detected coverage: $rate"
          awk "BEGIN { exit !($rate >= 0.65) }"
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: cobertura.xml

  integration:
    name: 6) Integration & CLI smoke
    runs-on: ubuntu-latest
    needs: [coverage]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --workspace --all-features --release
      - name: Smoke flows
        run: |
          echo "TODO: insert StoryStream CLI smoke tests (replace these)."
          # e.g. target/release/storystream --help

  api-stability:
    name: 7) API stability (public API diff)
    runs-on: ubuntu-latest
    needs: [integration]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cargo-public-api --locked
      - name: Diff vs master (deny changes)
        run: |
          if git rev-parse --verify origin/master >/dev/null 2>&1; then
            cargo public-api --diff-git-checkouts origin/master HEAD --deny changed
          else
            echo "No master yet; skipping."
          fi

  security:
    name: 8) Security & SBOM
    runs-on: ubuntu-latest
    needs: [api-stability]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install security tooling
        run: |
          cargo install cargo-audit --locked
          cargo install cargo-deny --locked
          cargo install cargo-cyclonedx --locked || true
      - run: cargo audit
      - run: cargo deny check --all-features
      - run: cargo cyclonedx --all > sbom.xml
      - uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.xml

  fuzz:
    name: 9) Fuzz (short)
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cargo-fuzz --locked
      - name: Run fuzzers
        shell: bash
        run: |
          if [ -d fuzz/fuzz_targets ]; then
            for t in $(ls fuzz/fuzz_targets/*.rs | xargs -n1 basename | sed 's/\.rs$//'); do
              cargo fuzz run "$t" -- -max_total_time=300
            done
          else
            echo "No fuzz targets; skipping."
          fi

  flaky:
    name: 10) Flaky test detector
    runs-on: ubuntu-latest
    needs: [fuzz]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Retry once on failure
        shell: bash
        run: |
          set -e
          cargo test --workspace --all-features || { echo "Retry..."; cargo test --workspace --all-features; echo "::warning::Flaky tests passed on retry"; }

  perf:
    name: 11) Performance regression
    runs-on: ubuntu-latest
    needs: [flaky]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - shell: bash
        run: |
          if ls benches/*.rs >/dev/null 2>&1; then
            cargo bench --all-features || true
          else
            echo "No benches; skipping."
          fi

  docs:
    name: 12) Docs & link check
    runs-on: ubuntu-latest
    needs: [perf]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Build rustdoc (fail on warnings)
        run: RUSTDOCFLAGS="-Dwarnings" cargo doc --workspace --all-features --no-deps
      - name: Package docs
        run: tar -czf docs.tgz -C target doc
      - uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs.tgz
      - name: Markdown link check
        uses: lycheeverse/lychee-action@v1
        with:
          args: --no-progress --exclude-mail --retry-wait 2 --max-concurrency 5 "**/*.md"

  release:
    name: 13) RC gate → release/tag
    runs-on: ubuntu-latest
    needs: [docs]
    if: github.ref == 'refs/heads/release-candidate'
    environment:
      name: release-candidate
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: "DrTomLLC"
          minimum-approvals: 1
          issue-title: "Approve StoryStream release"
      - run: cargo build --workspace --all-features --release
      - id: ver
        name: Read version from workspace root
        run: |
          cargo install cargo-metadata || true
          VER=$(cargo metadata --format-version=1 \
            | jq -r '
                .workspace_root as $root
                | .packages[]
                | select(.manifest_path | startswith($root))
                | .version
              ')
          echo "ver=$VER" >> $GITHUB_OUTPUT
      - name: Tag & push
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ steps.ver.outputs.ver }}" -m "StoryStream v${{ steps.ver.outputs.ver }}"
          git push origin "v${{ steps.ver.outputs.ver }}"
      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.ver.outputs.ver }}"
          generate_release_notes: true
          files: target/release/*
