# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ "v*" ]
  pull_request:
    branches: [ main, develop ]

# Prevent duplicate runs on the same ref
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  ############################
  # Fast static & style checks
  ############################
  check:
    name: Lint (fmt + clippy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Use toolchain from rust-toolchain.toml (if present)
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Cargo fmt (check)
        run: cargo fmt --all -- --check

      - name: Cargo clippy (deny warnings)
        run: cargo clippy --workspace --all-features --all-targets -- -D warnings

  ############################
  # Build & unit tests (3 OS)
  ############################
  build-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build (workspace, all features)
        run: cargo build --workspace --all-features --all-targets

      - name: Run tests
        run: cargo test --workspace --all-features -- --nocapture

  ############################
  # Coverage (Linux only)
  ############################
  coverage:
    name: Coverage (tarpaulin)
    runs-on: ubuntu-latest
    needs: check
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin --locked

      - name: Run coverage
        run: |
          cargo tarpaulin \
            --workspace \
            --all-features \
            --timeout 120 \
            --out Xml \
            --out Lcov \
            --engine llvm

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            cobertura.xml
            lcov.info
          if-no-files-found: ignore

      # Optional Codecov upload (will no-op without token on public repos)
      - name: Upload to Codecov
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false

  ############################
  # Supply-chain checks
  ############################
  security:
    name: Security (audit + deny)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Cargo audit (advisories)
        run: cargo audit

      # cargo-deny will read deny.toml at repo root if present
      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Cargo deny (licenses, bans, sources)
        run: cargo deny check --all-features

  ############################
  # Docs (ensure doc build stays green)
  ############################
  docs:
    name: Docs build
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build docs (no-deps)
        run: cargo doc --workspace --all-features --no-deps

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: cargo-docs
          path: target/doc
          if-no-files-found: ignore

  ############################
  # Gate: everything passed
  ############################
  verify:
    name: Verify
    if: always()
    runs-on: ubuntu-latest
    needs: [ build-test, coverage, security, docs ]
    steps:
      - name: Summarize job results
        run: |
          echo "build-test: ${{ needs.build-test.result }}"
          echo "coverage:   ${{ needs.coverage.result }}"
          echo "security:   ${{ needs.security.result }}"
          echo "docs:       ${{ needs.docs.result }}"
          if [ "${{ needs.build-test.result }}" != "success" ] || \
             [ "${{ needs.coverage.result }}"   != "success" ] || \
             [ "${{ needs.security.result }}"   != "success" ] || \
             [ "${{ needs.docs.result }}"       != "success" ]; then
            echo "One or more CI jobs failed."
            exit 1
          fi
